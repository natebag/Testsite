name: Mobile CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: 18
  JAVA_VERSION: 11

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Run linter
      working-directory: ./mobile
      run: npm run lint
    
    - name: Run unit tests
      working-directory: ./mobile
      run: npm test -- --coverage --watchAll=false
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./mobile/coverage
        flags: mobile

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Build Android APK
      working-directory: ./mobile
      run: |
        cd android
        ./gradlew assembleDebug
    
    - name: Upload Android APK
      uses: actions/upload-artifact@v3
      with:
        name: android-apk
        path: mobile/android/app/build/outputs/apk/debug/app-debug.apk

  build-ios:
    name: Build iOS
    runs-on: macos-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Install CocoaPods
      working-directory: ./mobile/ios
      run: pod install
    
    - name: Build iOS app
      working-directory: ./mobile
      run: |
        xcodebuild -workspace ios/MLGClan.xcworkspace \
                   -scheme MLGClan \
                   -configuration Debug \
                   -destination 'platform=iOS Simulator,name=iPhone 14' \
                   -derivedDataPath ios/build \
                   build

  e2e-tests:
    name: E2E Tests
    runs-on: macos-latest
    needs: [build-android, build-ios]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Install CocoaPods
      working-directory: ./mobile/ios
      run: pod install
    
    - name: Run Detox build
      working-directory: ./mobile
      run: npm run test:e2e:build
    
    - name: Run Detox tests
      working-directory: ./mobile
      run: npm run test:e2e

  deploy-staging:
    name: Deploy to Staging
    runs-on: macos-latest
    needs: [test, build-android, build-ios, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Install CocoaPods
      working-directory: ./mobile/ios
      run: pod install
    
    - name: Setup Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0
        bundler-cache: true
        working-directory: ./mobile
    
    - name: Deploy iOS to TestFlight
      working-directory: ./mobile
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
      run: bundle exec fastlane ios beta
    
    - name: Deploy Android to Internal Testing
      working-directory: ./mobile
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
      run: bundle exec fastlane android beta

  deploy-production:
    name: Deploy to Production
    runs-on: macos-latest
    needs: [test, build-android, build-ios, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json
    
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Install dependencies
      working-directory: ./mobile
      run: npm ci
    
    - name: Install CocoaPods
      working-directory: ./mobile/ios
      run: pod install
    
    - name: Setup Fastlane
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.0
        bundler-cache: true
        working-directory: ./mobile
    
    - name: Deploy iOS to App Store
      working-directory: ./mobile
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
        FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: bundle exec fastlane ios release
    
    - name: Deploy Android to Google Play
      working-directory: ./mobile
      env:
        GOOGLE_PLAY_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: bundle exec fastlane android release