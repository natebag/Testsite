name: Production Deployment Pipeline

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_VERSION: '20'
  DEPLOY_ENVIRONMENT: production
  
jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=high
        
      - name: Check for vulnerabilities
        run: |
          npm audit --parseable | grep -v "ELOCKVERIFY" || true
          
  quality-checks:
    runs-on: ubuntu-latest
    name: Code Quality & Type Safety
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: TypeScript type checking
        run: npm run type:check
        
      - name: Lint TypeScript definitions
        run: npm run lint:types
        
      - name: Validate gaming performance budgets
        run: npm run check:budgets
        
  comprehensive-testing:
    runs-on: ubuntu-latest
    name: Full Test Suite
    needs: [security-scan, quality-checks]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Run authentication tests
        run: npm run test:auth
        
      - name: Run CORS configuration tests
        run: npm run test:cors
        
      - name: Run CDN integration tests
        run: npm run test:cdn
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          
  performance-validation:
    runs-on: ubuntu-latest
    name: Performance & Load Testing
    needs: comprehensive-testing
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Performance audit
        run: npm run audit:performance
        
      - name: Bundle analysis
        run: npm run analyze:bundles
        
      - name: Quick load test
        run: npm run load:test:quick
        
      - name: CDN performance validation
        run: npm run test:cdn:performance
        
  build-staging:
    runs-on: ubuntu-latest
    name: Build & Stage Application
    needs: [performance-validation]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production
          
      - name: Build with Vite for browser optimization
        run: npm run build:vite
        env:
          NODE_ENV: production
          
      - name: Generate TypeScript definitions
        run: npm run build:types
        
      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            build/
            dist/
            public/
          retention-days: 30
          
  security-hardening-check:
    runs-on: ubuntu-latest
    name: Security Hardening Verification
    needs: build-staging
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify CSP implementation
        run: |
          echo "Checking Content Security Policy implementation..."
          test -f "src/core/security/csp/csp-config.js" || exit 1
          
      - name: Verify rate limiting
        run: |
          echo "Checking rate limiting implementation..."
          test -f "src/core/api/middleware/comprehensive-rate-limiter.js" || exit 1
          
      - name: Verify SSL configuration
        run: |
          echo "Checking SSL/TLS configuration..."
          test -f "src/core/security/ssl/certificate-manager.js" || exit 1
          
      - name: Verify authentication systems
        run: |
          echo "Checking gaming authentication systems..."
          test -f "src/core/auth/gaming-auth-service.js" || exit 1
          
      - name: Verify audit logging
        run: |
          echo "Checking audit logging implementation..."
          test -f "src/core/audit/audit-logger.js" || exit 1
          
  web3-integration-validation:
    runs-on: ubuntu-latest
    name: Web3 & Solana Integration Test
    needs: security-hardening-check
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify Phantom wallet integration
        run: |
          echo "Checking Phantom wallet integration..."
          test -f "src/features/wallet/phantom-wallet.js" || exit 1
          
      - name: Verify Solana SPL token support
        run: |
          echo "Checking SPL token integration..."
          test -f "src/features/tokens/spl-mlg-token.js" || exit 1
          
      - name: Verify voting system integration
        run: |
          echo "Checking Solana voting system..."
          test -f "src/features/voting/solana-voting-system.js" || exit 1
          
      - name: Test Web3 security implementation
        run: |
          echo "Checking Web3 security measures..."
          test -f "src/core/security/web3/web3-security-manager.js" || exit 1
          
  database-migration-check:
    runs-on: ubuntu-latest
    name: Database Migration Validation
    needs: web3-integration-validation
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: mlg_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Test database migrations
        run: npm run db:migrate
        env:
          DATABASE_URL: postgresql://postgres:test@localhost:5432/mlg_test
          
      - name: Verify database schema
        run: |
          echo "Checking database schema files..."
          test -f "src/core/database/postgresql-schema.sql" || exit 1
          test -f "src/core/database/migrations/001_initial_schema.sql" || exit 1
          
  pre-production-validation:
    runs-on: ubuntu-latest
    name: Pre-Production Final Checks
    needs: [database-migration-check]
    steps:
      - uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Validate production build
        run: |
          echo "Validating production build..."
          test -d "build/" || exit 1
          test -d "dist/" || exit 1
          
      - name: Check critical files exist
        run: |
          echo "Checking critical production files..."
          test -f "server.js" || exit 1
          test -f "package.json" || exit 1
          test -f "public/manifest.json" || exit 1
          
      - name: Verify environment configuration
        run: |
          echo "Checking environment configuration..."
          test -f "src/core/security/ssl/certificate-manager.js" || exit 1
          
  deploy-production:
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: pre-production-validation
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v'))
    environment: production
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install production dependencies
        run: npm ci --only=production
        
      - name: Create deployment package
        run: |
          tar -czf mlg-clan-production.tar.gz \
            server.js \
            package.json \
            package-lock.json \
            src/ \
            public/ \
            build/ \
            dist/ \
            node_modules/
            
      - name: Upload to deployment server
        run: |
          echo "Deployment package created: mlg-clan-production.tar.gz"
          echo "Ready for production deployment"
          
      - name: Health check post-deployment
        run: |
          echo "Production deployment completed"
          echo "Health checks would be performed here"
          
  rollback-capability:
    runs-on: ubuntu-latest
    name: Rollback Preparation
    needs: deploy-production
    if: always()
    steps:
      - name: Prepare rollback artifacts
        run: |
          echo "Rollback capability maintained"
          echo "Previous version artifacts preserved"
          
      - name: Document deployment
        run: |
          echo "Deployment timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          echo "Git SHA: ${{ github.sha }}"
          echo "Production deployment logged"