{
  "info": {
    "name": "MLG.clan Content Storage & Retrieval API",
    "description": "Comprehensive API collection for MLG.clan gaming platform content management, voting, and analytics. Includes authentication, content CRUD operations, MLG token voting system, search functionality, moderation tools, and analytics endpoints.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://api.mlg.clan/v1",
      "description": "API base URL"
    },
    {
      "key": "stagingUrl",
      "value": "https://staging-api.mlg.clan/v1",
      "description": "Staging API base URL"
    },
    {
      "key": "localUrl",
      "value": "http://localhost:3000/api/v1",
      "description": "Local development API base URL"
    },
    {
      "key": "authToken",
      "value": "",
      "description": "JWT authentication token"
    },
    {
      "key": "walletAddress",
      "value": "7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL",
      "description": "Test Solana wallet address"
    },
    {
      "key": "contentId",
      "value": "",
      "description": "Content ID for testing"
    },
    {
      "key": "userId",
      "value": "",
      "description": "User ID for testing"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{authToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set dynamic variables",
          "const timestamp = new Date().toISOString();",
          "pm.collectionVariables.set('timestamp', timestamp);",
          "",
          "// Generate request ID",
          "const requestId = pm.variables.replaceIn('{{$randomUUID}}');",
          "pm.collectionVariables.set('requestId', requestId);"
        ],
        "type": "text/javascript"
      }
    },
    {
      "listen": "test",
      "script": {
        "exec": [
          "// Global test assertions",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "pm.test('Response has proper headers', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});",
          "",
          "// Store response data for chaining",
          "const responseJson = pm.response.json();",
          "if (responseJson.success && responseJson.data) {",
          "    if (responseJson.data.content && responseJson.data.content.id) {",
          "        pm.collectionVariables.set('contentId', responseJson.data.content.id);",
          "    }",
          "    if (responseJson.data.user && responseJson.data.user.id) {",
          "        pm.collectionVariables.set('userId', responseJson.data.user.id);",
          "    }",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login with Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletAddress\": \"{{walletAddress}}\",\n  \"signature\": \"test-signature-data\",\n  \"message\": \"MLG.clan Login Verification\",\n  \"timestamp\": \"{{timestamp}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/wallet-login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "auth",
                "wallet-login"
              ]
            },
            "description": "Authenticate user with Solana wallet signature"
          },
          "response": [
            {
              "name": "Successful Login",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"walletAddress\": \"7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL\",\n  \"signature\": \"test-signature-data\",\n  \"message\": \"MLG.clan Login Verification\",\n  \"timestamp\": \"2024-01-01T12:00:00Z\"\n}"
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    \"refreshToken\": \"refresh-token-here\",\n    \"user\": {\n      \"id\": \"user-123e4567-e89b-12d3-a456-426614174000\",\n      \"walletAddress\": \"7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL\",\n      \"username\": \"GamerPro123\",\n      \"verified\": true\n    }\n  },\n  \"meta\": {\n    \"timestamp\": \"2024-01-01T12:00:00Z\",\n    \"requestId\": \"req-123\",\n    \"version\": \"1.0.0\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Login successful', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.token).to.not.be.empty;",
                  "});",
                  "",
                  "// Store auth token for subsequent requests",
                  "const responseJson = pm.response.json();",
                  "if (responseJson.success && responseJson.data.token) {",
                  "    pm.collectionVariables.set('authToken', responseJson.data.token);",
                  "    pm.collectionVariables.set('userId', responseJson.data.user.id);",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Authentication endpoints for wallet-based login"
    },
    {
      "name": "Content Management",
      "item": [
        {
          "name": "Create Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "X-Wallet-Address",
                "value": "{{walletAddress}}"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "files",
                  "type": "file",
                  "src": "/path/to/test-video.mp4",
                  "description": "Main content file"
                },
                {
                  "key": "thumbnail",
                  "type": "file",
                  "src": "/path/to/thumbnail.jpg",
                  "description": "Optional thumbnail image"
                },
                {
                  "key": "metadata",
                  "value": "{\n  \"title\": \"Epic Fortnite Victory Royale - Solo Clutch\",\n  \"description\": \"Incredible last-minute clutch in Fortnite Battle Royale. Watch as I take down the final squad with only 10 HP!\",\n  \"contentType\": \"video_clip\",\n  \"game\": \"Fortnite\",\n  \"platform\": \"pc\",\n  \"category\": \"highlights\",\n  \"tags\": [\"fortnite\", \"victory-royale\", \"clutch\", \"solo\", \"battle-royale\"],\n  \"gameMode\": \"Solo Battle Royale\",\n  \"difficulty\": \"hard\",\n  \"isPublic\": true,\n  \"allowComments\": true,\n  \"allowVoting\": true\n}",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/content",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content"
              ]
            },
            "description": "Create new gaming content with file upload and metadata"
          },
          "response": [
            {
              "name": "Content Created Successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer token"
                  }
                ]
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"content\": {\n      \"id\": \"content-123e4567-e89b-12d3-a456-426614174000\",\n      \"userId\": \"user-123e4567-e89b-12d3-a456-426614174001\",\n      \"walletAddress\": \"7XJiwLDrjzxDYdZipnJXzpr1iDTmK55XixSFAa7JgNEL\",\n      \"contentType\": \"video_clip\",\n      \"status\": \"processing\",\n      \"title\": \"Epic Fortnite Victory Royale - Solo Clutch\",\n      \"description\": \"Incredible last-minute clutch in Fortnite Battle Royale. Watch as I take down the final squad with only 10 HP!\",\n      \"tags\": [\"fortnite\", \"victory-royale\", \"clutch\", \"solo\"],\n      \"game\": \"Fortnite\",\n      \"platform\": \"pc\",\n      \"category\": \"highlights\",\n      \"files\": [\n        {\n          \"id\": \"file-123e4567-e89b-12d3-a456-426614174002\",\n          \"filename\": \"epic-victory-royale.mp4\",\n          \"mimeType\": \"video/mp4\",\n          \"size\": 15728640,\n          \"url\": \"https://cdn.mlg.clan/videos/epic-victory-royale.mp4\",\n          \"processingStatus\": \"pending\"\n        }\n      ],\n      \"views\": 0,\n      \"likes\": 0,\n      \"mlgVotes\": {\n        \"upvotes\": 0,\n        \"downvotes\": 0,\n        \"superVotes\": 0,\n        \"totalTokensBurned\": 0\n      },\n      \"qualityScore\": 0,\n      \"trendingScore\": 0,\n      \"createdAt\": \"2024-01-01T12:00:00Z\"\n    },\n    \"processingStatus\": \"initiated\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content created successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.content.id).to.not.be.empty;",
                  "    pm.expect(responseJson.data.content.title).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Content List",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/content?limit=20&offset=0&sortBy=created_at&sortOrder=desc&contentType=video_clip&game=Fortnite",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                },
                {
                  "key": "sortBy",
                  "value": "created_at"
                },
                {
                  "key": "sortOrder",
                  "value": "desc"
                },
                {
                  "key": "contentType",
                  "value": "video_clip"
                },
                {
                  "key": "game",
                  "value": "Fortnite"
                },
                {
                  "key": "platform",
                  "value": "pc",
                  "disabled": true
                },
                {
                  "key": "category",
                  "value": "highlights",
                  "disabled": true
                },
                {
                  "key": "tags",
                  "value": "fortnite,victory",
                  "disabled": true
                },
                {
                  "key": "search",
                  "value": "epic victory",
                  "disabled": true
                },
                {
                  "key": "trending",
                  "value": "true",
                  "disabled": true
                },
                {
                  "key": "minViews",
                  "value": "100",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieve content list with filtering and pagination"
          },
          "response": [
            {
              "name": "Content List Retrieved",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/content?limit=20",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "content"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "20"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"content\": [\n      {\n        \"id\": \"content-123e4567-e89b-12d3-a456-426614174000\",\n        \"title\": \"Epic Fortnite Victory Royale\",\n        \"description\": \"Amazing clutch play in Fortnite\",\n        \"contentType\": \"video_clip\",\n        \"game\": \"Fortnite\",\n        \"platform\": \"pc\",\n        \"category\": \"highlights\",\n        \"views\": 1250,\n        \"likes\": 89,\n        \"mlgVotes\": {\n          \"upvotes\": 42,\n          \"downvotes\": 2,\n          \"superVotes\": 5,\n          \"totalTokensBurned\": 67\n        },\n        \"trendingScore\": 92.3,\n        \"createdAt\": \"2024-01-01T12:00:00Z\"\n      }\n    ],\n    \"pagination\": {\n      \"total\": 150,\n      \"limit\": 20,\n      \"offset\": 0,\n      \"hasNext\": true,\n      \"hasPrev\": false\n    }\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content list retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data.pagination).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Content by ID",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}?includeAnalytics=true&includeRelated=true&incrementView=true",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}"
              ],
              "query": [
                {
                  "key": "includeAnalytics",
                  "value": "true"
                },
                {
                  "key": "includeRelated",
                  "value": "true"
                },
                {
                  "key": "incrementView",
                  "value": "true"
                }
              ]
            },
            "description": "Get specific content with analytics and related content"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.content).to.be.an('object');",
                  "    pm.expect(responseJson.data.content.id).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Update Content",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Epic Fortnite Victory Royale\",\n  \"description\": \"Updated description with more details about this incredible clutch play\",\n  \"tags\": [\"fortnite\", \"victory-royale\", \"clutch\", \"solo\", \"updated\"],\n  \"category\": \"highlights\",\n  \"difficulty\": \"expert\",\n  \"allowComments\": true,\n  \"allowVoting\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}"
              ]
            },
            "description": "Update content metadata and settings"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content updated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.content).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Delete Content",
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}?reason=No longer needed&hardDelete=false",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}"
              ],
              "query": [
                {
                  "key": "reason",
                  "value": "No longer needed"
                },
                {
                  "key": "hardDelete",
                  "value": "false"
                }
              ]
            },
            "description": "Delete content (soft delete by default)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Content deleted successfully', function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Content CRUD operations"
    },
    {
      "name": "MLG Token Voting",
      "item": [
        {
          "name": "Submit Upvote",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Wallet-Address",
                "value": "{{walletAddress}}"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"voteType\": \"upvote\",\n  \"tokenAmount\": 1,\n  \"transactionSignature\": \"5J8QvU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQY\",\n  \"walletSignature\": {\n    \"signature\": \"test-signature-data\",\n    \"message\": \"MLG.clan Vote Verification\",\n    \"publicKey\": \"{{walletAddress}}\"\n  },\n  \"comment\": \"Amazing clutch play!\",\n  \"isAnonymous\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "vote"
              ]
            },
            "description": "Cast upvote by burning 1 MLG token"
          },
          "response": [
            {
              "name": "Vote Submitted Successfully",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer token"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"voteType\": \"upvote\",\n  \"tokenAmount\": 1\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"vote\": {\n      \"id\": \"vote-123e4567-e89b-12d3-a456-426614174000\",\n      \"contentId\": \"content-123e4567-e89b-12d3-a456-426614174000\",\n      \"userId\": \"user-123e4567-e89b-12d3-a456-426614174001\",\n      \"voteType\": \"upvote\",\n      \"tokensBurned\": 1,\n      \"transactionSignature\": \"5J8QvU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQY\",\n      \"createdAt\": \"2024-01-01T12:00:00Z\"\n    },\n    \"contentStats\": {\n      \"totalVotes\": 43,\n      \"newTrendingScore\": 93.5\n    },\n    \"userStats\": {\n      \"tokensRemaining\": 99,\n      \"totalVotesGiven\": 1\n    }\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vote submitted successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.vote).to.be.an('object');",
                  "    pm.expect(responseJson.data.vote.voteType).to.equal('upvote');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Submit Downvote",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Wallet-Address",
                "value": "{{walletAddress}}"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"voteType\": \"downvote\",\n  \"tokenAmount\": 2,\n  \"transactionSignature\": \"5J8QvU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQY\",\n  \"walletSignature\": {\n    \"signature\": \"test-signature-data\",\n    \"message\": \"MLG.clan Vote Verification\",\n    \"publicKey\": \"{{walletAddress}}\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "vote"
              ]
            },
            "description": "Cast downvote by burning 2 MLG tokens"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Downvote submitted successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.vote.voteType).to.equal('downvote');",
                  "    pm.expect(responseJson.data.vote.tokensBurned).to.equal(2);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Submit Super Vote",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "X-Wallet-Address",
                "value": "{{walletAddress}}"
              },
              {
                "key": "X-Wallet-Signature",
                "value": "signature:message:publicKey"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"voteType\": \"super_vote\",\n  \"tokenAmount\": 5,\n  \"transactionSignature\": \"5J8QvU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQYU7snqjBxNqVQhGjPFzQFzQY\",\n  \"walletSignature\": {\n    \"signature\": \"test-signature-data\",\n    \"message\": \"MLG.clan Vote Verification\",\n    \"publicKey\": \"{{walletAddress}}\"\n  },\n  \"comment\": \"This is absolutely incredible! Best play I've ever seen!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "vote"
              ]
            },
            "description": "Cast super vote by burning 5 MLG tokens"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Super vote submitted successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.vote.voteType).to.equal('super_vote');",
                  "    pm.expect(responseJson.data.vote.tokensBurned).to.equal(5);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Content Votes",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/votes?limit=50&voteType=upvote&sortBy=created_at",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "votes"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "50"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "voteType",
                  "value": "upvote"
                },
                {
                  "key": "includeAnonymous",
                  "value": "true",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "created_at"
                }
              ]
            },
            "description": "Get vote history and statistics for content"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Vote history retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.votes).to.be.an('array');",
                  "    pm.expect(responseJson.data.summary).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "MLG token voting system endpoints"
    },
    {
      "name": "Search & Discovery",
      "item": [
        {
          "name": "Advanced Content Search",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content/search?q=epic fortnite victory&type=content&fuzzy=true&semantic=false&rankBy=relevance&limit=20&contentType=video_clip&game=Fortnite",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "search"
              ],
              "query": [
                {
                  "key": "q",
                  "value": "epic fortnite victory",
                  "description": "Search query"
                },
                {
                  "key": "type",
                  "value": "content"
                },
                {
                  "key": "exact",
                  "value": "false",
                  "disabled": true
                },
                {
                  "key": "fuzzy",
                  "value": "true"
                },
                {
                  "key": "semantic",
                  "value": "false"
                },
                {
                  "key": "rankBy",
                  "value": "relevance"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "contentType",
                  "value": "video_clip"
                },
                {
                  "key": "game",
                  "value": "Fortnite"
                },
                {
                  "key": "platform",
                  "value": "pc",
                  "disabled": true
                }
              ]
            },
            "description": "Search content with AI-powered relevance ranking"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Search completed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.results).to.be.an('array');",
                  "    pm.expect(responseJson.data.total).to.be.a('number');",
                  "    pm.expect(responseJson.data.searchTime).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Trending Content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content/trending?timeframe=day&game=Fortnite&limit=10",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "trending"
              ],
              "query": [
                {
                  "key": "timeframe",
                  "value": "day",
                  "description": "hour, day, week, month"
                },
                {
                  "key": "game",
                  "value": "Fortnite"
                },
                {
                  "key": "category",
                  "value": "highlights",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get trending content based on engagement and token activity"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Trending content retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.trending).to.be.an('array');",
                  "    pm.expect(responseJson.data.trendingMetrics).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Featured Content",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content/featured?limit=5",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "featured"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            },
            "description": "Get curated featured content"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Featured content retrieved', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.featured).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Content search and discovery endpoints"
    },
    {
      "name": "Content Moderation",
      "item": [
        {
          "name": "Report Content",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"inappropriate\",\n  \"description\": \"This content contains inappropriate material that violates community guidelines. The language used is offensive and the gameplay shows unsportsmanlike behavior.\",\n  \"category\": \"content\",\n  \"severity\": \"medium\",\n  \"evidence\": [\n    \"https://example.com/screenshot1.png\",\n    \"https://example.com/screenshot2.png\"\n  ]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/report",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "report"
              ]
            },
            "description": "Submit content report for moderation review"
          },
          "response": [
            {
              "name": "Report Submitted",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer token"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"reason\": \"spam\",\n  \"description\": \"This content is spam\"\n}"
                }
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "json",
              "header": [],
              "cookie": [],
              "body": "{\n  \"success\": true,\n  \"data\": {\n    \"reportId\": \"report-123e4567-e89b-12d3-a456-426614174000\",\n    \"status\": \"pending\"\n  }\n}"
            }
          ],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Report submitted successfully', function () {",
                  "    pm.response.to.have.status(201);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.reportId).to.not.be.empty;",
                  "    pm.expect(responseJson.data.status).to.equal('pending');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Content moderation and reporting endpoints"
    },
    {
      "name": "User Content Management",
      "item": [
        {
          "name": "Get User Content",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/content?status=published&contentType=video_clip&limit=20&sortBy=created_at",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}",
                "content"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "published"
                },
                {
                  "key": "contentType",
                  "value": "video_clip"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0",
                  "disabled": true
                },
                {
                  "key": "sortBy",
                  "value": "created_at"
                }
              ]
            },
            "description": "Get all content created by specific user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User content retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.content).to.be.an('array');",
                  "    pm.expect(responseJson.data.stats).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get User Content Statistics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}",
                "disabled": true
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/users/{{userId}}/content/stats?timeframe=month&includeBreakdown=true",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "users",
                "{{userId}}",
                "content",
                "stats"
              ],
              "query": [
                {
                  "key": "timeframe",
                  "value": "month",
                  "description": "day, week, month, year, all"
                },
                {
                  "key": "includeBreakdown",
                  "value": "true"
                }
              ]
            },
            "description": "Get comprehensive statistics for user's content"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('User statistics retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.stats).to.be.an('object');",
                  "    pm.expect(responseJson.data.stats.totalContent).to.be.a('number');",
                  "    pm.expect(responseJson.data.stats.totalViews).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "User content management endpoints"
    },
    {
      "name": "Analytics",
      "item": [
        {
          "name": "Get Content Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/analytics?timeframe=month&metrics=views,engagement,geographic&breakdown=country",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "analytics"
              ],
              "query": [
                {
                  "key": "timeframe",
                  "value": "month"
                },
                {
                  "key": "metrics",
                  "value": "views,engagement,geographic"
                },
                {
                  "key": "breakdown",
                  "value": "country"
                }
              ]
            },
            "description": "Get detailed analytics for content (content owner only)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Analytics retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.analytics).to.be.an('object');",
                  "    pm.expect(responseJson.data.analytics.totalViews).to.be.a('number');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Get Platform Analytics",
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/analytics/platform?timeframe=week&breakdown=game",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "analytics",
                "platform"
              ],
              "query": [
                {
                  "key": "timeframe",
                  "value": "week"
                },
                {
                  "key": "breakdown",
                  "value": "game"
                }
              ]
            },
            "description": "Get platform-wide analytics (admin only)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Platform analytics retrieved successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.summary).to.be.an('object');",
                  "    pm.expect(responseJson.data.trends).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Analytics and metrics endpoints"
    },
    {
      "name": "File Upload",
      "item": [
        {
          "name": "Initiate Chunked Upload",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"filename\": \"epic-fortnite-clip.mp4\",\n  \"fileSize\": 50000000,\n  \"mimeType\": \"video/mp4\",\n  \"chunkCount\": 50,\n  \"checksum\": \"d41d8cd98f00b204e9800998ecf8427e\",\n  \"contentId\": \"{{contentId}}\",\n  \"fileType\": \"main\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/upload/initiate",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "upload",
                "initiate"
              ]
            },
            "description": "Initiate chunked file upload for large files"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Upload initiated successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.uploadId).to.not.be.empty;",
                  "    pm.expect(responseJson.data.uploadUrls).to.be.an('array');",
                  "    ",
                  "    // Store upload ID for completion",
                  "    pm.collectionVariables.set('uploadId', responseJson.data.uploadId);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Complete Chunked Upload",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"chunkETags\": [\n    \"etag1\",\n    \"etag2\",\n    \"etag3\"\n  ],\n  \"totalSize\": 50000000,\n  \"checksum\": \"d41d8cd98f00b204e9800998ecf8427e\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/upload/{{uploadId}}/complete",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "upload",
                "{{uploadId}}",
                "complete"
              ]
            },
            "description": "Complete chunked upload after all chunks are uploaded"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Upload completed successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.true;",
                  "    pm.expect(responseJson.data.fileId).to.not.be.empty;",
                  "    pm.expect(responseJson.data.file).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "File upload and management endpoints"
    },
    {
      "name": "Error Scenarios",
      "item": [
        {
          "name": "Invalid Content ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content/invalid-content-id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "invalid-content-id"
              ]
            },
            "description": "Test error handling for invalid content ID"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 404 for invalid content ID', function () {",
                  "    pm.response.to.have.status(404);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error).to.equal('CONTENT_001');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"voteType\": \"upvote\",\n  \"tokenAmount\": 1\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content/{{contentId}}/vote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content",
                "{{contentId}}",
                "vote"
              ]
            },
            "description": "Test unauthorized access to protected endpoint"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns 401 for unauthorized request', function () {",
                  "    pm.response.to.have.status(401);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error).to.include('AUTH_');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Validation Error",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"A\",\n  \"description\": \"Too short\",\n  \"contentType\": \"invalid_type\",\n  \"tags\": []\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/content",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content"
              ]
            },
            "description": "Test validation error handling"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Returns validation errors', function () {",
                  "    pm.response.to.have.status(400);",
                  "    const responseJson = pm.response.json();",
                  "    pm.expect(responseJson.success).to.be.false;",
                  "    pm.expect(responseJson.error).to.equal('validation_failed');",
                  "    pm.expect(responseJson.details.errors).to.be.an('array');",
                  "    pm.expect(responseJson.details.errors.length).to.be.greaterThan(0);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        },
        {
          "name": "Rate Limit Test",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/content?limit=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "content"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1"
                }
              ]
            },
            "description": "Test rate limiting (run multiple times rapidly)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Response is successful or rate limited', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "    ",
                  "    if (pm.response.code === 429) {",
                  "        const responseJson = pm.response.json();",
                  "        pm.expect(responseJson.success).to.be.false;",
                  "        pm.expect(responseJson.error).to.include('RATE_');",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ]
        }
      ],
      "description": "Error handling and edge case scenarios"
    }
  ]
}