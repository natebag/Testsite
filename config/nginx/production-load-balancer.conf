# MLG.clan Production Load Balancer Configuration
# High-performance Nginx configuration for production deployment

# Define upstream servers for load balancing
upstream mlg_clan_backend {
    # Load balancing method: least_conn for gaming workloads
    least_conn;
    
    # Primary application servers
    server 127.0.0.1:3000 weight=3 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3001 weight=3 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3002 weight=3 max_fails=3 fail_timeout=30s;
    
    # Backup server for failover
    server 127.0.0.1:3003 weight=1 max_fails=2 fail_timeout=10s backup;
    
    # Connection pooling
    keepalive 32;
    keepalive_requests 1000;
    keepalive_timeout 60s;
}

# WebSocket upstream for real-time gaming features
upstream mlg_clan_websocket {
    # IP hash for sticky sessions (required for WebSocket)
    ip_hash;
    
    server 127.0.0.1:3000 weight=1 max_fails=2 fail_timeout=30s;
    server 127.0.0.1:3001 weight=1 max_fails=2 fail_timeout=30s;
    server 127.0.0.1:3002 weight=1 max_fails=2 fail_timeout=30s;
    server 127.0.0.1:3003 weight=1 max_fails=2 fail_timeout=30s backup;
}

# API upstream for better control
upstream mlg_clan_api {
    least_conn;
    
    server 127.0.0.1:3000 weight=5 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3001 weight=5 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3002 weight=5 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:3003 weight=2 max_fails=2 fail_timeout=10s backup;
    
    keepalive 16;
    keepalive_requests 500;
    keepalive_timeout 60s;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=api:10m rate=20r/s;
limit_req_zone $binary_remote_addr zone=voting:10m rate=5r/s;
limit_req_zone $binary_remote_addr zone=wallet:10m rate=3r/s;
limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=per_ip:10m;

# Map for real IP detection
map $http_x_forwarded_for $real_ip {
    ~^(\d+\.\d+\.\d+\.\d+) $1;
    default $remote_addr;
}

# Security headers map
map $sent_http_content_type $content_security_policy {
    default "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' wss: https:; worker-src 'self' blob:; child-src 'self' blob:;";
    ~^text/ "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';";
}

# Cache zones
proxy_cache_path /var/cache/nginx/mlg_static levels=1:2 keys_zone=static_cache:10m max_size=1g inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/mlg_api levels=1:2 keys_zone=api_cache:10m max_size=500m inactive=30m use_temp_path=off;

# Main server block
server {
    listen 80;
    listen [::]:80;
    server_name mlg.clan www.mlg.clan;
    
    # Redirect HTTP to HTTPS
    return 301 https://$server_name$request_uri;
}

# HTTPS server block
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name mlg.clan www.mlg.clan;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/mlg-clan.crt;
    ssl_certificate_key /etc/ssl/private/mlg-clan.key;
    ssl_certificate_key /etc/ssl/private/mlg-clan-backup.key;
    
    # SSL Security
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # DH parameters for perfect forward secrecy
    ssl_dhparam /etc/ssl/dhparam.pem;
    
    # HSTS
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy $content_security_policy always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # Connection and rate limiting
    limit_conn per_ip 20;
    limit_req zone=general burst=20 nodelay;
    
    # Basic settings
    client_max_body_size 50M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    keepalive_timeout 65s;
    send_timeout 30s;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_comp_level 6;
    gzip_min_length 1000;
    gzip_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/xml
        text/javascript
        text/x-component
        text/x-cross-domain-policy;
    
    # Brotli compression (if module available)
    brotli on;
    brotli_comp_level 6;
    brotli_types
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml
        text/plain
        text/css
        text/xml
        text/javascript;
    
    # Root and index
    root /opt/mlg-clan/public;
    index index.html;
    
    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    # Maintenance mode check
    set $maintenance_mode 0;
    if (-f /tmp/mlg-clan-maintenance) {
        set $maintenance_mode 1;
    }
    
    if ($maintenance_mode = 1) {
        return 503;
    }
    
    error_page 503 @maintenance;
    location @maintenance {
        root /var/www/maintenance;
        try_files /index.html =503;
        internal;
    }
    
    # Health check endpoint (bypass all caching)
    location = /health {
        access_log off;
        proxy_pass http://mlg_clan_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 5s;
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate" always;
    }
    
    # API endpoints with enhanced rate limiting
    location /api/ {
        limit_req zone=api burst=50 nodelay;
        
        # Enhanced rate limiting for specific endpoints
        location /api/voting/ {
            limit_req zone=voting burst=10 nodelay;
            proxy_pass http://mlg_clan_api;
            include /etc/nginx/proxy_params;
        }
        
        location /api/wallet/ {
            limit_req zone=wallet burst=5 nodelay;
            proxy_pass http://mlg_clan_api;
            include /etc/nginx/proxy_params;
        }
        
        location /api/upload/ {
            limit_req zone=upload burst=3 nodelay;
            client_max_body_size 100M;
            proxy_pass http://mlg_clan_api;
            include /etc/nginx/proxy_params;
            proxy_request_buffering off;
        }
        
        # Default API handling
        proxy_pass http://mlg_clan_api;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Timeouts for API calls
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 60s;
        
        # API response caching
        proxy_cache api_cache;
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_use_stale error timeout invalid_header updating http_500 http_502 http_503 http_504;
        proxy_cache_background_update on;
        proxy_cache_lock on;
        
        # Cache control headers
        add_header X-Cache-Status $upstream_cache_status;
        add_header X-Request-ID $request_id;
    }
    
    # WebSocket connections for real-time features
    location /ws/ {
        proxy_pass http://mlg_clan_websocket;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 10m;
        proxy_read_timeout 10m;
        
        # Disable caching for WebSocket
        proxy_cache off;
        proxy_buffering off;
        
        # Gaming-specific headers
        add_header X-Gaming-Platform "MLG.clan" always;
    }
    
    # Static assets with aggressive caching
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Try local files first, then proxy to backend
        try_files $uri @backend_static;
        
        # Security headers for static content
        add_header X-Content-Type-Options nosniff always;
        add_header X-Frame-Options DENY always;
        
        # Static file caching
        proxy_cache static_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_use_stale error timeout invalid_header updating;
        proxy_ignore_headers Cache-Control Expires;
    }
    
    # Backend static file fallback
    location @backend_static {
        proxy_pass http://mlg_clan_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Cache static content from backend
        proxy_cache static_cache;
        proxy_cache_valid 200 1h;
        proxy_cache_valid 404 5m;
        proxy_cache_use_stale error timeout invalid_header updating;
        
        expires 1h;
        add_header Cache-Control "public";
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Application routes (SPA fallback)
    location / {
        try_files $uri $uri/ @backend;
        
        # Cache HTML files for short duration
        location ~* \.html$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            add_header Vary "Accept-Encoding";
        }
    }
    
    # Backend application fallback
    location @backend {
        proxy_pass http://mlg_clan_backend;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $real_ip;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-ID $request_id;
        
        # Application timeouts
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
        
        # No caching for dynamic content
        proxy_cache off;
        add_header Cache-Control "no-cache, must-revalidate" always;
        add_header X-Request-ID $request_id;
    }
    
    # Security: Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ /(config|logs|temp|node_modules) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Block common exploit attempts
    location ~ /(wp-admin|wp-login|phpmyadmin|admin|administrator) {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Custom log format with gaming metrics
    log_format gaming_combined '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'rt=$request_time uct="$upstream_connect_time" '
                              'uht="$upstream_header_time" urt="$upstream_response_time" '
                              'cs=$upstream_cache_status rid=$request_id';
    
    access_log /var/log/nginx/mlg-clan-access.log gaming_combined;
    error_log /var/log/nginx/mlg-clan-error.log warn;
}

# Status and monitoring server
server {
    listen 8080;
    listen [::]:8080;
    server_name localhost;
    
    # Allow only local connections
    allow 127.0.0.1;
    allow ::1;
    deny all;
    
    # Nginx status
    location /nginx-status {
        stub_status on;
        access_log off;
    }
    
    # Upstream status
    location /upstream-status {
        # This requires nginx-module-vts or similar
        # vhost_traffic_status_display;
        # vhost_traffic_status_display_format html;
        return 200 "Upstream status monitoring not configured\n";
        add_header Content-Type text/plain;
    }
    
    # Health check aggregator
    location /health-check {
        access_log off;
        proxy_pass http://mlg_clan_backend/health;
        proxy_connect_timeout 2s;
        proxy_send_timeout 2s;
        proxy_read_timeout 2s;
    }
}

# Stream block for TCP/UDP load balancing (if needed)
# stream {
#     upstream backend_stream {
#         server 127.0.0.1:3000;
#         server 127.0.0.1:3001;
#         server 127.0.0.1:3002;
#     }
#     
#     server {
#         listen 9000;
#         proxy_pass backend_stream;
#         proxy_timeout 1s;
#         proxy_responses 1;
#     }
# }